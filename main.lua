function love.draw()
 love.graphics.setColor(0, 0.66, 0.66, 1)
 love.graphics.rectangle("fill", 300, 300, 50, 30)
end
local core = {}
local key = {}
local buf = {}
function key.setting()
-- Setup keys config
key[0], key[1], key[2], key[3] ={}, {}, {}, {}
key[0].x = 100 key[0].y = -50
key[0].width = 50 key[0].height = 50
key[0].mode = 0
key[1].x = 175
key[1].y = -50
key[1].width = 50
key[1].height = 50
key[1].mode = 0
key[2].x = 325
key[2].y = -50
key[2].width = 50
key[2].height = 50
key[2].mode = 0
key[3].x = 250
key[3].y = -50
key[3].width = 50
key[3].height = 50
key[3].mode = 0
end
function love.load()
success = love.window.setMode(800, 600, flags) core["scene"] = 0
--Scene : menu / game / other
core["touch"] = -1
--Nbr of items generated by the game
core["mem"] = 0
--Garbage collector cycles
key.setting()
end
function key.appendBuffer()
if (match.random(1000)<25)
   --Append number of items.
   core.touch = core.touch + 1
   --Create object depending on key config.
   buf[core.touch] = {} buf (core.touch].x = key[match.random(4) - 1].x
   buf[core.touch].y = -50
  end
end
function key.scrolling()
  for i = 0, core.touch do
  --Scrolling objects
  if (buf[i] ~= nil) then
     buf[i].y = buf[i].y +10
  end
  -- Reset objects
  if (buf[i] ~= nil and buf[i].y == 600) then
      buf[i].y = nil buf[i].x = nil buf[i] buf = nil
   end
  end
end
function memoryCleaner()
     --Clean memory
     core.mem = core.mem + 1
     if (core.mem == 500) then
         collectgarbage()
     end
  end
function love.update(dt)
   key.appendBuffer()
   key.scrolling()
   memoryCleaner()
end
